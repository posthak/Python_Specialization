"""
–ó–∞–¥–∞–Ω–∏–µ No2
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–∏ÃÜ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–µÃà —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–∏ÃÜ–ª.
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–∏ÃÜ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –º–æ–¥—É–ª—å logging.
"""

import logging

logging.basicConfig(filename='Log/log_2.log',
                    filemode='w',
                    encoding='utf-8',
                    format='{levelname} - {asctime} –≤ —Å—Ç—Ä–æ–∫–µ '
                           '{lineno} —Ñ—É–Ω–∫—Ü–∏—è "{funcName}()" : {msg}',
                    style='{',
                    level=logging.INFO)
logger = logging.getLogger(__name__)


def decor(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        logger.info(f'–∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏: {args}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {result}')
        return result

    return wrapper


@decor
def power(x, y):
    return x ** y


print(power(2, 10))
print(power(5, 3))
