"""
–ó–∞–¥–∞–Ω–∏–µ No4
üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–∏ÃÜ —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3 - —è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–∏ÃÜ—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå –õ–æ–≥–∏—Ä—É–∏ÃÜ—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
"""

from datetime import datetime, timedelta
import calendar

"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4.
–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-
—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
"""

import logging
from datetime import datetime, date

logging.basicConfig(filename='HW15/Log/log_4.log',
                    filemode='w',
                    encoding='utf-8',
                    format='{levelname} - {asctime} —Ñ—É–Ω–∫—Ü–∏—è "{funcName}()"'
                           ' —Å—Ç—Ä–æ–∫–∞ {lineno} : {msg}',
                    style='{',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


def text_to_date(text):
    months = {'—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
              '–∏—é–ª': 7, '–∞–≤–≥': 8, '—Å–µ–Ω': 9, '–æ–∫—Ç': 10,
              '–Ω–æ—è': 11, '–¥–µ–∫': 12}
    weekdays = {'–ø–æ–Ω': 0, '–≤—Ç–æ': 1, '—Å—Ä–µ': 2, '—á–µ—Ç': 3, '–ø—è—Ç': 4, '—Å—É–±': 5,
                '–≤–æ—Å': 6}

    '''–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É'''
    try:
        count, weekday_, month_, *other = text.split()  # 3-—è —Å—Ä–µ–¥–∞ –º–∞—è

        count = int(count[0])
        if count > 5:
            raise Exception('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è')
        weekday = weekdays[weekday_[:3]]
        m = month_[:3]
        if m == "–º–∞—è":
            month_ = "–º–∞–π"
        month = months[month_[:3]]  # 5 - —á–∏—Å–ª–æ
    except Exception as exc:
        logger.info(
            f'–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {count}-–π , –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"{weekday_}",'
            f' –º–µ—Å—è—Ü:"{month_}" =  –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {exc}')
        count = 0

    if count:
        count_week = 0
        year = datetime.now().year  # 2023
        for day in range(1, 32):
            try:
                result = date(year=year, month=month, day=day)
                if result.weekday() == weekday:
                    count_week += 1
                    if count_week == count:
                        logger.info(
                            f'{count}-–π {weekday_} {month_} {year} = {result} ')
                        return result
            except ValueError as e:
                logger.info(
                    f'–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {count}-–π , –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"{weekday_}",'
                    f' –º–µ—Å—è—Ü:"{month_}" =  –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}')
                print(f'–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. —Å–º. Log/log_4.log')
        print(f'–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
        logger.info(
            f'–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {count}-–π , –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"{weekday_}",'
            f' –º–µ—Å—è—Ü:"{month_}". –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')

    else:
        print(f'–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. —Å–º. Log/log_4.log')
        return None


if __name__ == '__main__':
    print(text_to_date('3-–π –≤—Ç–æ –º–∞—è'))
    # print(text_to_date('3-–π –≤—Ç–æ—Ä–Ω–∏–∫ –º–∞—Ä—Ç–∞'))
    # print(text_to_date('5-–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–µ–Ω—Ç—è–±—Ä—è'))
    # print(text_to_date('5-–π —á–µ—Ç–≤–µ—Ä–≥ –∞–≤–≥—É—Å—Ç–∞'))

#
# def convert_text_to_date(text):
#     parts = text.split()
#     # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
#     ordinal_numbers = {'1st': 1, '2nd': 2, '3rd': 3, '4th': 4, '5th': 5}
#     try:
#         # –ø–æ–ª—É—á–∏–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
#         ordinal = ordinal_numbers[parts[0].lower()]
#         weekday = parts[1].capitalize()
#         month = parts[3].capitalize()
#
#         # –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
#         current_year = datetime.now().year
#         # –Ω–∞–π–¥—ë–º –∏–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0-6) –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥—É–ª—å calendar
#         weekday_index = list(calendar.day_name).index(weekday)
#         # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ –º–µ—Å—è—Ü–µ
#         dt = datetime(current_year, datetime.strptime(month, '%B').month, 1)
#
#         while dt.weekday() != weekday_index:
#             dt += timedelta(days=1)
#
#         # –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ –¥–Ω—è—Ö
#         dt += timedelta(days=(ordinal - 1) * 7)
#         return dt
#     except (ValueError, IndexError, KeyError) as e:
#         print(f'–û—à–∏–±–∫–∞: {e}')
#         return None
