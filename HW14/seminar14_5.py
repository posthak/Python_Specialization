"""
–ó–∞–¥–∞–Ω–∏–µ No5
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ö—Ä–∞–Ω—è—â–∏–∏ÃÜ –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É,
    –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä, –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–∏ÃÜ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å
    –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
"""

class Rectangle:
    """
    –ö–ª–∞—Å—Å "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏,
    –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏,
    –ø–æ–ª—É—á–∏—Ç—å –ø–ª–æ—â–∞–¥—å –∏ –ø–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
    """

    # __slots__ = ('_width', '_length')

    def __init__(self, side_a, side_b=0):
        self._width = side_a
        if side_b == 0:
            side_b = side_a
        self._length = side_b

    @property
    def width(self):
        return self._width

    @property
    def length(self):
        return self._length

    @length.setter
    def length(self, new_len):
        if new_len <= 0:
            raise ValueError("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        self._length = new_len

    @width.setter
    def width(self, new_width):
        if new_width <= 0:
            raise ValueError("–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        self._width = new_width

    def get_perimeter(self):
        return 2 * (self._width + self._length)

    def get_area(self):
        return self._width * self._length

    def __add__(self, other):
        """
        —Å–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–∏–º–µ—Ç—Ä—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ "Rectangle" –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ —Å–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–≤
        """
        res = self.get_perimeter() + other.get_perimeter()
        return Rectangle(res)

    def __sub__(self, other):
        """
        –≤—ã—á–∏—Ç–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –≤—ã—á–∏—Ç–∞—é—Ç—Å—è –ø–µ—Ä–∏–º–µ—Ç—Ä—ã –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ "Rectangle" –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–≤
        """
        res = abs(self.get_perimeter() - other.get_perimeter())
        return Rectangle(res)

    def __eq__(self, other):  # —Ä–∞–≤–Ω–æ ==
        return self.get_area() == other.get_area()

    def __ne__(self, other):  # –Ω–µ—Ä–∞–≤–Ω–æ !=
        return self.get_area() != other.get_area()

    def __gt__(self, other):  # –±–æ–ª—å—à–µ >
        return self.get_area() > other.get_area()

    def __ge__(self, other):  # –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ >=
        return self.get_area() >= other.get_area()

    def __lt__(self, other):  # –º–µ—Ç–æ–¥ –º–µ–Ω—å—à–µ <
        return self.get_area() < other.get_area()

    def __le__(self, other):  # –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ <=
        return self.get_area() <= other.get_area()

    def __str__(self):
        res = f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ {self._width} –∏ {self._length}'
        return res
